name: '[ Dev / PR ] Build LENA Web Application Server'
on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - 'dev/**'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # checkout source
      - uses: actions/checkout@v2
      # install jdk 11
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      # setup settings.xml of maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: '[{ "id": "github", "url": "https://maven.pkg.github.com/openlena/*" }]'
          servers: ${{secrets.GH_MVN_REPO_USER_INFO}}
      # packaging project
      - name: Build with Maven
        run: mvn -P tomcat9 -B package --file was-dist/pom.xml
      # get project version
      - name: Bump Version
        id: get-version
        uses: nnichols/maven-version-bump-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      # setup Container Image Build module
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Setup repository access info
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # get repository name
      - id: repository
        name: change github.repository string to lowercase
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}
      # Set current date as env variable
      - name: Set current date as env variable
        run: echo "datetime=$(date +'%y%m%d%H%M%S')" >> $GITHUB_ENV
      # build docker container image and push to repository
      - name: Build and push amazonlinux2
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./was-containerization/Dockerfile
          push: true
          build-args: |
            FROM_IMAGE=amazonlinux:2
          tags: |
            ghcr.io/${{ steps.repository.outputs.lowercase }}:${{ steps.get-version.outputs.version }}_amazonlinux2_${{ env.datetime }}
      - name: Build and push centos7
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./was-containerization/Dockerfile
          push: true
          build-args: |
            FROM_IMAGE=centos:7
          tags: |
            ghcr.io/${{ steps.repository.outputs.lowercase }}:${{ steps.get-version.outputs.version }}_centos7_${{ env.datetime }}
      - name: Build and push rocky8
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./was-containerization/Dockerfile
          push: true
          build-args: |
            FROM_IMAGE=rockylinux/rockylinux:8.4
          tags: |
            ghcr.io/${{ steps.repository.outputs.lowercase }}:${{ steps.get-version.outputs.version }}_rocky8_${{ env.datetime }}
      - name: Build and push ubuntu1804
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./was-containerization/Dockerfile
          push: true
          build-args: |
            FROM_IMAGE=ubuntu:18.04
          tags: |
            ghcr.io/${{ steps.repository.outputs.lowercase }}:${{ steps.get-version.outputs.version }}_ubuntu1804_${{ env.datetime }}
    outputs:
      repository: ${{ steps.repository.outputs.lowercase }}
      version: ${{ steps.get-version.outputs.version }}
      datetime: ${{ env.datetime }}
  # test was for each os
  amazonlinux2:
    name: [test] amazonlinux2
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Run conatiner for simple test
      - name: Docker Run Action
        id: dockerRunAction
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/${{ needs.build.outputs.repository }}:${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}
          shell: bash
          run: |
            echo "========================="
            ${LENA_HOME}/servers/${SERVER_NAME}/start.sh
            ${LENA_HOME}/servers/${SERVER_NAME}/ps.sh
            if [ "$?" -eq "0" ] ; then
              RESULT=SUCCESS
            else
              RESULT=FAIL
            fi
            echo '::set-output name=RESULT::'${RESULT}
            echo "========================="
      # Check server status
      - name: PS script Result Check
        if: ${{ steps.dockerRunAction.outputs.RESULT != 'SUCCESS' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Command Failed [ ps.sh ]')
      # Delete test image
      - name: Delete image
        if: always()
        uses: bots-house/ghcr-delete-image-action@v1.0.1
        with:
          owner: openlena
          name: lena-was
          token: ${{ secrets.GH_PAT_FULL_ACCESS_AUTH }}
          tag: ${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}
  # test was for each os
  centos7:
    name: [test] centos7
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Run conatiner for simple test
      - name: Docker Run Action
        id: dockerRunAction
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/${{ needs.build.outputs.repository }}:${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}
          shell: bash
          run: |
            echo "========================="
            ${LENA_HOME}/servers/${SERVER_NAME}/start.sh
            ${LENA_HOME}/servers/${SERVER_NAME}/ps.sh
            if [ "$?" -eq "0" ] ; then
              RESULT=SUCCESS
            else
              RESULT=FAIL
            fi
            echo '::set-output name=RESULT::'${RESULT}
            echo "========================="
      # Check server status
      - name: PS script Result Check
        if: ${{ steps.dockerRunAction.outputs.RESULT != 'SUCCESS' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Command Failed [ ps.sh ]')
      # Delete test image
      - name: Delete image
        if: always()
        uses: bots-house/ghcr-delete-image-action@v1.0.1
        with:
          owner: openlena
          name: lena-was
          token: ${{ secrets.GH_PAT_FULL_ACCESS_AUTH }}
          tag: ${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}
  # test was for each os
  rocky8:
    name: [test] rocky8
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Run conatiner for simple test
      - name: Docker Run Action
        id: dockerRunAction
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/${{ needs.build.outputs.repository }}:${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}
          shell: bash
          run: |
            echo "========================="
            ${LENA_HOME}/servers/${SERVER_NAME}/start.sh
            ${LENA_HOME}/servers/${SERVER_NAME}/ps.sh
            if [ "$?" -eq "0" ] ; then
              RESULT=SUCCESS
            else
              RESULT=FAIL
            fi
            echo '::set-output name=RESULT::'${RESULT}
            echo "========================="
      # Check server status
      - name: PS script Result Check
        if: ${{ steps.dockerRunAction.outputs.RESULT != 'SUCCESS' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Command Failed [ ps.sh ]')
      # Delete test image
      - name: Delete image
        if: always()
        uses: bots-house/ghcr-delete-image-action@v1.0.1
        with:
          owner: openlena
          name: lena-was
          token: ${{ secrets.GH_PAT_FULL_ACCESS_AUTH }}
          tag: ${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}
  # test was for each os
  ubuntu1804:
    name: [test] ubuntu1804
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Run conatiner for simple test
      - name: Docker Run Action
        id: dockerRunAction
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/${{ needs.build.outputs.repository }}:${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}
          shell: bash
          run: |
            echo "========================="
            ${LENA_HOME}/servers/${SERVER_NAME}/start.sh
            ${LENA_HOME}/servers/${SERVER_NAME}/ps.sh
            if [ "$?" -eq "0" ] ; then
              RESULT=SUCCESS
            else
              RESULT=FAIL
            fi
            echo '::set-output name=RESULT::'${RESULT}
            echo "========================="
      # Check server status
      - name: PS script Result Check
        if: ${{ steps.dockerRunAction.outputs.RESULT != 'SUCCESS' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Command Failed [ ps.sh ]')
      # Delete test image
      - name: Delete image
        if: always()
        uses: bots-house/ghcr-delete-image-action@v1.0.1
        with:
          owner: openlena
          name: lena-was
          token: ${{ secrets.GH_PAT_FULL_ACCESS_AUTH }}
          tag: ${{ needs.build.outputs.version }}_${{ github.job }}_${{ needs.build.outputs.datetime }}